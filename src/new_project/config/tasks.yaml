clone_repo:
  description: >
    Clone the repository {repo_url} into a local folder named 'cloned_repo'.
    Make sure to remove any previously existing folder to avoid conflicts.
  expected_output: >
    Confirmation that the repository was cloned successfully or an error if it failed.
  agent: cloner



inspect_repo:
  description: >
    Use your inspection tool to walk through the cloned_repo directory and list:
    - Setup files like README.md, requirements.txt, setup.py, Dockerfile
    - Possible entry points like app.py, main.py

    Your response should include a clear summary of what files were found and what they likely indicate about the project.
  expected_output: >
    A summary of the repository structure including detected setup files and possible entry points.
  agent: inspector

run_repo:
  description: >
   Check if the file `cloned_repo/Dockerfile` exists in the project root.

    If it exists:
    - Use the RunDockerTool to run exactly these two shell commands:

    ```bash
    docker build -t audited_project ./cloned_repo
    docker run --rm audited_project
    ```
    If you run the dockerfile, do not run the tool again
    This will build the Docker image and run the container, capturing any output or errors.
    And, you are not allowed to run it more than once
    If it includes errors, capture them and provide a summary, and keep them for the reviewer.
    If the file is **not present**, clearly state: "❌ Dockerfile not found. Cannot run the project."
  expected_output: >
    Docker build and run logs, or a clear message if Dockerfile is missing.
  agent: runner

review_errors:
  description: >
    Analyze the run output or error logs. Identify what went wrong (if anything),
    and suggest possible fixes or improvements to make the project runnable.
  expected_output: >
    A bullet-pointed summary of errors with suggestions or fixes to try. If no errors occurred, confirm successful execution.
  agent: reviewer
